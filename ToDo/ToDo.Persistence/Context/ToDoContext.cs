using Microsoft.EntityFrameworkCore;
using ToDo.Application;
using ToDo.Domain.Subtasks;
using ToDo.Domain.ToDos;
using ToDo.Domain.Users;
using ToDoApp.Domain.Audit;

namespace ToDo.Persistence.Context
{
    public class ToDoContext : DbContext
    {
        #region Ctor
        public ToDoContext(DbContextOptions<ToDoContext> options) : base(options)
        {

        }
        #endregion

        #region DbSets
        public DbSet<User> Users { get; set; }
        public DbSet<ToDoEntity> ToDos { get; set; }
        public DbSet<Subtask> Subtasks { get; set; }
        public DbSet<Audit> Audits { get; set; }

        #endregion

        #region Configurations
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.ApplyConfigurationsFromAssembly(typeof(ToDoContext).Assembly);
        }
        #endregion

        public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            

            var entries = ChangeTracker
                .Entries()
                .Where(e => e.Entity is BaseEntity && (
                        e.State == EntityState.Added
                        || e.State == EntityState.Modified));

            foreach (var entityEntry in entries)
            {
                ((BaseEntity)entityEntry.Entity).ModifiedAt = DateTime.Now;

                if (entityEntry.State == EntityState.Added)
                {
                    ((BaseEntity)entityEntry.Entity).CreatedAt = DateTime.Now;
                }
            }
            var auditEntries = OnBeforeSaveChanges();
            //return await base.SaveChangesAsync(cancellationToken);


            
            var result = await base.SaveChangesAsync( cancellationToken);
            await OnAfterSaveChanges(auditEntries);
            return result;
        }
        private List<AuditEntry> OnBeforeSaveChanges()
        {
            ChangeTracker.DetectChanges();
            var auditEntries = new List<AuditEntry>();
            foreach (var entry in ChangeTracker.Entries())
            {
                if (entry.Entity is Audit || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged)
                    continue;

                var auditEntry = new AuditEntry(entry);
                auditEntry.TableName = entry.Metadata.GetTableName();
                switch (entry.State)
                {
                    case EntityState.Modified:
                        auditEntry.OperationType = OperationTypes.Updated;
                        break;
                    case EntityState.Added:
                        auditEntry.OperationType = OperationTypes.Created;
                        break;
                } // EF Core 3.1: entry.Metadata.GetTableName();
                auditEntries.Add(auditEntry);

                foreach (var property in entry.Properties)
                {
                    // The following condition is ok with EF Core 2.2 onwards.
                    // If you are using EF Core 2.1, you may need to change the following condition to support navigation properties: https://github.com/dotnet/efcore/issues/17700
                    // if (property.IsTemporary || (entry.State == EntityState.Added && property.Metadata.IsForeignKey()))
                    if (property.IsTemporary)
                    {
                        // value will be generated by the database, get the value after saving
                        auditEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    string propertyName = property.Metadata.Name;
                    if (property.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[propertyName] = property.CurrentValue;
                        continue;
                    }

                    switch (entry.State)
                    {
                        case EntityState.Added:
                            auditEntry.OperationType = OperationTypes.Created;
                            auditEntry.NewResults[propertyName] = property.CurrentValue;
                            break;

                        case EntityState.Modified:
                            if (property.IsModified)
                            {
                                if (propertyName == "ToDoStatus" && auditEntry.OperationType != OperationTypes.Deleted && (ToDoStatuses)property.CurrentValue == ToDoStatuses.Done)
                                    auditEntry.OperationType = OperationTypes.MarkedAsDone; 
                                else if (propertyName == "Status" && (EntityStatuses)property.CurrentValue == EntityStatuses.Deleted)
                                    auditEntry.OperationType = OperationTypes.Deleted;
                                auditEntry.OldResults[propertyName] = entry.GetDatabaseValues().GetValue<object>(propertyName).ToString();
                                auditEntry.NewResults[propertyName] = property.CurrentValue;
                            }
                            break;
                    }
                }
            }

            // Save audit entities that have all the modifications
            foreach (var auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
            {
                Audits.Add(auditEntry.ToAudit());
            }

            // keep a list of entries where the value of some properties are unknown at this step
            return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();
        }

        private Task OnAfterSaveChanges(List<AuditEntry> auditEntries)
        {
            if (auditEntries == null || auditEntries.Count == 0)
                return Task.CompletedTask;

            foreach (var auditEntry in auditEntries)
            {
                // Get the final value of the temporary properties
                foreach (var prop in auditEntry.TemporaryProperties)
                {
                    if (prop.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                    else
                    {
                        auditEntry.NewResults[prop.Metadata.Name] = prop.CurrentValue;
                    }
                }

                // Save the Audit entry
                Audits.Add(auditEntry.ToAudit());
            }

            return base.SaveChangesAsync();
        }

    }
}
